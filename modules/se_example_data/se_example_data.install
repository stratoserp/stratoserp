<?php

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\se_customer\Entity\Customer;
use Drupal\se_item\Entity\Item;
use Drupal\se_supplier\Entity\Supplier;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function se_example_data_install() {
  se_example_data_status_term_setup();
  se_example_data_business_setup();
  se_example_data_contact_term_setup();
  se_example_data_item_setup();
  // se_example_data_assembly_setup();
  se_example_data_service_setup();
  se_example_data_recurring_setup();
  se_example_data_stock_setup();
  se_example_data_bulk_stock_setup();
  se_example_data_payment_term_setup();
  se_example_data_ticket_setup();
}

function se_example_data_status_term_setup() {

  // Status for quotes, purchase orders, invoices.
  $terms = [
    'Ordered',
    'Closed',
    'Open',
  ];

  stratoserp_create_terms('se_status', $terms);
}

function se_example_data_business_setup() {
  $customer_defaults = se_business_load_defaults();
  $customer = Customer::create($customer_defaults + [
    'name' => 'Test customer 1',
      'type' => 'se_customer',
  ]);
  $customer->save();

  $customer = Customer::create($customer_defaults + [
    'name' => 'Test customer 2',
      'type' => 'se_customer',
  ]);
  $customer->save();

  $supplier_defaults = se_business_load_defaults();
  $supplier = Supplier::create($supplier_defaults + [
    'name' => 'Test supplier 1',
      'type' => 'se_supplier',
  ]);
  $supplier->save();

  $supplier = Supplier::create($supplier_defaults + [
    'name' => 'Test supplier 2',
      'type' => 'se_supplier',
  ]);
  $supplier->save();
}

function se_example_data_contact_term_setup() {
  // Install some basic contact types.
  $terms = [
    'General contact',
    'Accounts contact',
    'Main contact',
  ];

  if (!$term = stratoserp_create_terms('se_contact_type', $terms)) {
    return;
  }

  // Now set the last one as the default for the field.
  $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('se_contact.se_contact.se_type_ref');
  $field->setDefaultValue(['target_uuid' => $term->uuid()]);
  $field->save();

  // Also set the last one as the 'main' contact term.
  $config = \Drupal::configFactory()->getEditable('se_contact.settings');
  $config->set('main_contact_term', $term->id());
  $config->save();
}

/**
 * Implements hook_install().
 */
function se_example_data_item_setup() {
  stratoserp_create_terms('se_sale_category', [
    'Consumables',
    'Contracting',
    'Hardware',
    'Hosting service',
    'Managed service',
    'Service',
    'Software',
  ]);

  stratoserp_create_terms('se_product_type', [
    'CPU',
    'Domain name',
    'Ink cartridge',
    'Keyboard',
    'Memory',
    'Notebook',
    'Onsite service',
    'Video card',
  ]);

  stratoserp_create_terms('se_manufacturer', [
    'Acer',
    'ASUS',
    'Canon',
    'Dell',
    'HP',
    'Intel',
    'Internal',
    'Kingston',
    'Microsoft',
    'Lenovo',
    'Seagate',
    'System76',
    'Western digital',
  ]);
}

function se_example_data_recurring_setup() {
  $defaults = se_item_load_defaults('Hosting Service', 'Domain name', 'Internal', 'se_recurring');

  // P1Y = 1 year - Refer http://php.net/manual/en/dateinterval.createfromdatestring.php
  $item = Item::create($defaults + [
      'name' => 'Domain name registration',
      'body' => 'Domain name registration - yearly.',
      'se_code' => [['value' => 'DOMAINNAME-YEARLY']],
      'se_sell_price' => [['value' => 6000]],
      'se_recurring_period' => [['duration' => 'P1Y']],
      'se_cost_price' => [['value' => 2000]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Domain name - biennually',
      'body' => 'Domain name - biennually.',
      'se_code' => [['value' => 'DOMAINNAME-BIENNUALLY']],
      'se_sell_price' => [['value' => 12000]],
      'se_recurring_period' => [['duration' => 'P2Y']],
      'se_cost_price' => [['value' => 4000]],
    ]);
  $item->save();

  $defaults = se_item_load_defaults('Hosting service', 'Domain name', 'Internal', 'se_recurring');

  $item = Item::create($defaults + [
      'name' => 'Domain hosting',
      'body' => 'Domain hosting - yearly.',
      'se_code' => [['value' => 'DOMAINHOSTING-YEARLY']],
      'se_sell_price' => [['value' => 24000]],
      'se_recurring_period' => [['duration' => 'P1Y']],
      'se_cost_price' => [['value' => 12000]],
    ]);
  $item->save();
}

function se_example_data_service_setup() {
  $defaults = se_item_load_defaults('Service', 'Onsite service', 'Internal', 'se_service');

  $item = Item::create($defaults + [
      'name' => 'Technical service',
      'body' => 'Technical service by one of our qualified technicians.',
      'se_code' => [['value' => 'TECHSERVICE']],
      'se_sell_price' => [['value' => 16000]],
      'se_cost_price' => [['value' => 5500]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Workshop service',
      'body' => 'Workshop service by one of our qualified technicians.',
      'se_code' => [['value' => 'WORKSHOP']],
      'se_sell_price' => [['value' => 12000]],
      'se_cost_price' => [['value' => 5500]],
    ]);
  $item->save();
}

function se_example_data_stock_setup() {
  $defaults = se_item_load_defaults('Hardware', 'Keyboard', 'Microsoft', 'se_stock');

  $item = Item::create($defaults + [
      'name' => 'Microsoft KB600',
      'body' => 'Microsoft KB600',
      'se_code' => [['value' => 'MS-KB-600']],
      'se_serial' => [['value' => '111111']],
      'se_sell_price' => [['value' => 4500]],
      'se_cost_price' => [['value' => 2500]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Microsoft KB800',
      'body' => 'Microsoft KB800',
      'se_code' => [['value' => 'MS-KB-800']],
      'se_serial' => [['value' => '222222']],
      'se_sell_price' => [['value' => 5500]],
      'se_cost_price' => [['value' => 3000]],
    ]);
  $item->save();

  $defaults = se_item_load_defaults('Hardware', 'Notebook', 'Lenovo', 'se_stock');

  $item = Item::create($defaults + [
      'name' => 'Lenovo 11e',
      'body' => 'Lenovo 11e',
      'se_code' => [['value' => 'LN-11E']],
      'se_serial' => [['value' => '333333']],
      'se_sell_price' => [['value' => 89900]],
      'se_cost_price' => [['value' => 67900]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Lenovo x280',
      'body' => 'Lenovo x280',
      'se_code' => [['value' => 'LN-X280']],
      'se_serial' => [['value' => '444444']],
      'se_sell_price' => [['value' => 129900]],
      'se_cost_price' => [['value' => 100100]],
    ]);
  $item->save();

  $defaults = se_item_load_defaults('Consumables', 'Ink cartridge', 'Canon', 'se_stock');

  $item = Item::create($defaults + [
      'name' => 'Canon PIXMA - Cyan',
      'body' => 'Canon PIXMA - Cyan',
      'se_code' => [['value' => 'CN-PIXMA-CYAN']],
      'se_serial' => [['value' => '555555']],
      'se_sell_price' => [['value' => 1499]],
      'se_cost_price' => [['value' => 1000]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Canon PIXMA - Yellow',
      'body' => 'Canon PIXMA - Yellow',
      'se_code' => [['value' => 'CN-PIXMA-YELLOW']],
      'se_serial' => [['value' => '666666']],
      'se_sell_price' => [['value' => 1499]],
      'se_cost_price' => [['value' => 1000]],
    ]);
  $item->save();

  $item = Item::create($defaults + [
      'name' => 'Canon PIXMA - Magenta',
      'body' => 'Canon PIXMA - Magenta',
      'se_code' => [['value' => 'CN-PIXMA-MAGENTA']],
      'se_serial' => [['value' => '777777']],
      'se_sell_price' => [['value' => 1499]],
      'se_cost_price' => [['value' => 1000]],
    ]);
  $item->save();
}

function se_example_data_bulk_stock_setup() {
  $defaults = se_item_load_defaults('Hardware', 'Keyboard', 'Microsoft', 'se_bulk_stock');

  $item = Item::create($defaults + [
      'name' => '1 Ream - A4 Copy paper',
      'body' => '1 Ream - A4 Copy paper',
      'se_code' => [['value' => 'A4-PAPER']],
      'se_sell_price' => [['value' => 4.99]],
      'se_cost_price' => [['value' => 3.99]],
      'se_available' => [['value' => 10]],
    ]);
  $item->save();
}

/**
 * Implements hook_install().
 */
function se_example_data_payment_term_setup() {
  $terms = [
    'Cash',
    'Credit/Debit card',
    'Cheque',
    'Paypal',
    'Direct deposit',
  ];

  if (!$term = stratoserp_create_terms('se_payment_type', $terms)) {
    return;
  }

  // Set the variable.
  $config = \Drupal::configFactory()->getEditable('se_payment.settings');
  $config->set('default_payment_vocabulary', 'se_payment_type');
  $config->set('default_payment_term', $term->id());
  $config->save();
}

/**
 * Implements hook_install().
 */
function se_example_data_ticket_setup() {
  stratoserp_create_terms('se_ticket_priority', [
    'High',
    'Low',
    'Urgent',
    'Whenever',
    'Normal',
  ]);

  stratoserp_create_terms('se_ticket_type', [
    'Appointment',
    'Call',
    'Follow up',
    'In store',
    'Onsite',
    'Quote',
    'Todo',
    'Warranty',
    'Remote',
  ]);

  $term = stratoserp_create_terms('se_ticket_status', [
    'In progress',
    'Wait customer',
    'Closed',
    'Open',
  ]);

  $priority_term = se_example_data_set_term_field_config('Normal', 'se_ticket_priority', 'se_ticket.se_ticket.se_priority_ref');
  $ticket_type_term = se_example_data_set_term_field_config('Onsite', 'se_ticket_type', 'se_ticket.se_ticket.se_type_ref');

  // Also set the term defaults in config.
  $config = \Drupal::configFactory()->getEditable('se_ticket.settings');
  $config->set('se_ticket_priority', $priority_term->id());
  $config->set('se_ticket_type', $ticket_type_term->id());
  $config->save();
}


/**
 * Helper function for adding items.
 *
 * @param $category
 *   Taxonomy category.
 * @param $product_type
 *   Taxonomy product type.
 * @param $manufacturer
 *   Taxonomy manufacturer.
 * @param $type
 *   Item type.
 *
 * @return array
 */
function se_item_load_defaults($category, $product_type, $manufacturer, $type): array {
  $sale_category = se_example_data_load_term_by_name($category, 'se_sale_category');
  $product_type = se_example_data_load_term_by_name($product_type, 'se_product_type');
  $manufacturer = se_example_data_load_term_by_name($manufacturer, 'se_manufacturer');

  return [
    'type' => $type,
    'langcode' => 'en',
    'uid' => 1,
    'status' => 1,
    'se_active' => TRUE,
    'se_sale_category_ref' => [['target_id' => $sale_category->id()]],
    'se_manufacturer_ref'  => [['target_id' => $manufacturer->id()]],
    'se_product_type_ref'  => [['target_id' => $product_type->id()]],
  ];
}

/**
 * Helper function for adding customers.
 *
 * @return array
 */
function se_business_load_defaults(): array {
  return [
    'langcode' => 'en',
    'uid' => '1',
    'status' => 1,
  ];
}

/**
 * Helper function for checking/adding taxonomy terms during setup.
 *
 * @param string $taxonomy
 *   Taxonomy vocabulary to check/add.
 * @param array $terms
 *   Array of terms to check/add.
 *
 * @return \Drupal\taxonomy\Entity\Term|bool
 *   The last created term, or false if none were created.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function stratoserp_create_terms(string $taxonomy, array $terms) {
  $term = FALSE;

  // The last one will be used as the default.
  foreach ($terms as $new_term) {
    $term = se_example_data_load_term_by_name($new_term, $taxonomy);
    if (!$term) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      $term = Term::create([
        'parent' => [],
        'name'   => $new_term,
        'vid'    => $taxonomy,
      ]);
      $term->save();
    }
  }

  // Return the last term created.
  return $term;
}

/**
 * Helper function for term setup.
 */
function se_example_data_set_term_field_config(string $search_term, string $vocabulary, string $field): EntityInterface {
  // Load the already created default status terms.
  $term = se_example_data_load_term_by_name($search_term, $vocabulary);

  // Now set the last one as the default for the field.
  $field = \Drupal::entityTypeManager()->getStorage('field_config')->load($field);
  $field->setDefaultValue(['target_uuid' => $term->uuid()]);
  $field->save();

  return $term;
}

/**
 * Make our own function, since we call it a lot.
 */
function se_example_data_load_term_by_name(string $term, string $vocab) {
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $term, 'vid' => $vocab]);

  return reset($terms);
}
