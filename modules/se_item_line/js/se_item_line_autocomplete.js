/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  var autocomplete = void 0;

  function searchHandler(event) {
    var options = autocomplete.options;

    if (options.isComposing) {
      return false;
    }

    var term = event.target.value;

    if (term.length > 0 && options.firstCharacterBlacklist.indexOf(term[0]) !== -1) {
      return false;
    }

    return term.length >= options.minLength;
  }

  function sourceData(request, response) {
    var elementId = this.element.attr("id");

    if (!(elementId in autocomplete.cache)) {
      autocomplete.cache[elementId] = {};
    }

    function showSuggestions(suggestions) {
      response(suggestions);
    }

    var customer = $("#edit-se-cu-ref-0-target-id").val();
    var customerNid = customer.substring(customer.indexOf("(") + 1, customer.indexOf(")"));

    function sourceCallbackHandler(data) {
      autocomplete.cache[elementId][request.term] = data;

      showSuggestions(data);
    }

    if (autocomplete.cache[elementId].hasOwnProperty(request.term)) {
      showSuggestions(autocomplete.cache[elementId][request.term]);
    } else {
      var options = $.extend({
        success: sourceCallbackHandler,
        data: { q: request.term, se_cu_ref: customerNid }
      }, autocomplete.ajax);
      $.ajax(this.element.attr("data-autocomplete-path"), options);
    }
  }

  function focusHandler() {
    return false;
  }

  function selectHandler(event, ui) {
    event.target.value = ui.item.value;

    return false;
  }

  function renderItem(ul, item) {
    return $("<li>").append($("<a>").html(item.label)).appendTo(ul);
  }

  Drupal.behaviors.autocomplete = {
    attach: function attach(context) {
      var $autocomplete = $(context).find("input.form-autocomplete").once("autocomplete");
      if ($autocomplete.length) {
        var blacklist = $autocomplete.attr("data-autocomplete-first-character-blacklist");
        $.extend(autocomplete.options, {
          firstCharacterBlacklist: blacklist || ""
        });

        $autocomplete.autocomplete(autocomplete.options).each(function () {
          $(this).data("ui-autocomplete")._renderItem = autocomplete.options.renderItem;
        });

        $autocomplete.on("compositionstart.autocomplete", function () {
          autocomplete.options.isComposing = true;
        });
        $autocomplete.on("compositionend.autocomplete", function () {
          autocomplete.options.isComposing = false;
        });
      }
    },
    detach: function detach(context, settings, trigger) {
      if (trigger === "unload") {
        $(context).find("input.form-autocomplete").removeOnce("autocomplete").autocomplete("destroy");
      }
    }
  };

  autocomplete = {
    cache: {},

    options: {
      source: sourceData,
      focus: focusHandler,
      search: searchHandler,
      select: selectHandler,
      renderItem: renderItem,
      minLength: 1,

      firstCharacterBlacklist: "",

      isComposing: false
    },
    ajax: {
      dataType: "json"
    }
  };

  Drupal.autocomplete = autocomplete;
})(jQuery, Drupal);
